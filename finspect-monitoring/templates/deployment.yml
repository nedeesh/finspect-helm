apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.spec.app }}-deployment
  namespace: {{ .Release.Namespace }}
spec:
  revisionHistoryLimit: 3
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: {{ .Values.spec.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.spec.app }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: {{ .Values.spec.app }}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: {{ .Values.spec.app }}
                topologyKey: kubernetes.io/hostname
              weight: 100

      containers:
        - name: {{ .Values.spec.app }}-container
          image: nedeesh/monitoring:1.0.1
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.spec.container.port }}
              name: http
          volumeMounts:
            - name: persistent-storage
              mountPath: "/var/log"
#              mountPath: /var/log/tms-fs-service
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.environment | quote }}
            - name: jasypt.encryptor.password
              value: encAppPwdTmsFsService
            - name: APP_ENCRYPTION_PASSWORD
              value: m5fesaDu
#            - name: log.dir
#              value: /var/log
#              value: /var/log/tms-fs-service
      volumes:
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: pvc-name
#          livenessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
#            successThreshold: {{ .Values.livenessProbe.successThreshold }}
#            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
#            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
#            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
#          readinessProbe:
#            httpGet:
#              path: /actuator/health
#              port: 8080
#            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
#            successThreshold: {{ .Values.readinessProbe.successThreshold }}
#            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
#            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
#            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}

